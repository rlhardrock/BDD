buildscript {
	ext.serenityCoreVersion = '3.3.0'
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "net.serenity-bdd:serenity-single-page-report:3.3.0"
		classpath "net.serenity-bdd:serenity-gradle-plugin:3.4.2"
	}
}

plugins {
	id "net.serenity-bdd.serenity-gradle-plugin" version "${serenityCoreVersion}"
	id 'java'
	id 'eclipse'
	id 'idea'
}

defaultTasks 'clean','test','aggregate'

group 'proyecto'
version '1.0-SNAPSHOT' //opcional

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

ext {
	junitVersion = '5.8.2'

	guavaVersion = '23.0'

	poiVersion = '3.17'

	serenityCoreVersion = '3.3.0'

	slf4jsVersion = '2.0.7'
	assertJVersion = '3.22.0'
	logbackVersion = '1.2.10'

	lombokVersion = '1.18.22'

	hamcrestVersion = '2.2'
}

dependencies {
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

	implementation "com.google.guava:guava:${guavaVersion}"

	implementation "group: 'org.apache.poi', name: 'poi', version: ${poiVersion}"
	implementation "group: 'org.apache.poi', name: 'poi-ooxml', version: ${poiVersion}"

	implementation "net.serenity-bdd:serenity-junit5:${serenityCoreVersion}"
	implementation "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}"
	implementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}"
	implementation "net.serenity-bdd:serenity-rest-assured:${serenityCoreVersion}"
	implementation "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}"
	implementation "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}"
	implementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}"
	implementation "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}"

	implementation "org.slf4j:slf4j-simple:${slf4jsVersion}"
	implementation "org.assertj:assertj-core:${assertJVersion}"
	implementation "ch.qos.logback:logback-classic:${logbackVersion}" //No es gran tema

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
}

//probar
tasks.withType(JavaCompile) {
	options.compilerArgs += ["--add-modules", "java.xml.bind"]
	options.fork = true
	options.forkOptions.executable = 'javac'
	options.encoding = "UTF-8"
}

compileTestJava.options.encoding = "UTF-8"

test {
	useJUnitPlatform()
	testLogging.showStandardStreams = true
	systemProperties System.getProperties()
}

serenity {
	testRoot = "proyecto.runners"
	requirementsBaseDir = "path to features"
	reports = ["single-page-html"]
}

gradle.startParameter.continueOnFailure = true
test.finalizedBy(aggregate)
