Configuracion Inicial de IDE

Crear folder "com.project" en test/java y en main/java

Crear carpetas test/java en "com.project"
stepDefinitions
runners 

Crear carpetas en main/java en "com.project", segun estrategia:
POM =>  pages, steps, models, utils
SP =>  tasks, interactions, questions, interfaces, exceptions, models, utils (algunas veces reports)

Crear en test/resources crear un directorio  
features

Revisar y configurar el 'build.gradle'

*****ver

Construir y configurar 'serenity.conf'  a nivel del directorio "features"

*****ver

Hacer Dise침o de Automatizaci칩n

crear en test/resources/features -> file  function.feature    -->  Gherkin

*****ver

por cada function crea un function.feature
por cada feature crea un functionStepDefinitions
ex:  Cart, Login, Search, Checkout, Landing, Takeoff, Form...

*****ver

Construir el Runner, que la automatizacion convertir los pasos a metodos en snippet para usar en stepDefinitions

Crear en test/java/.../runners & stepsDefinitions la clase "function.runner"
y hacerla ejecutable adicionando (confirmar ruta del feature):

*****
crear y configurar Runner, ejecutar para obtener los steps
*****

hacer RUN ! ver BUILD SUCCESSFUL in Xs

copia @Dado y demas en su respectivo StepDefinitions
en la consola expone resultado,
crear la clase functionDefinition test/java/definitions/
copiar y pegar dentro de la public class "functionStepDefinition" y borrar los lanzadores

adicionar
import io.cucumber.java.es.*;

*****

Dirige a logica de Programaci칩n

en main/java/pages

crear class  loginPage
donde se modelan los localizadores  ---> extends PageObject  (singular)
import net.serenitybdd.core.pages.PageObject;
import org.openqa.selenium.By;

modelar localizadores

By txtUsuario = By.id("LoginPanel0_Username");
con todos los localizadores

usar Lombok o generar Get

crear steps en su folder respectivo   loginSteps

dentro de la clase

@Page
loginPage FunctionPage = new loginPage();

    @Step("Comentario opcional -> Usuario abre el navegador")
    public void abrirNavegador(){
        FunctionPage.openUrl("https://demo.serenity.is/");
    }



instanciar en stepDefinitions

@Steps  (plural)  antes de los metodos gherkin

@Steps
loginSteps LoginSteps;

llamar al metodo  en el Dado/Cuando ...



********************************************************

JAVA 17 LTS
GRADLE 8.*
INTELLIJ IDEA + plugins

Crear proyecto en el IDE

Versionar en con GitHub

A침adir target/ a .gitignore

Construir el build.gradle

Crear en main/java y test/java la carpeta "com.projecto"

Crear en test/resources la carpeta "features", "data", etc

Crear a nivel de features, "serenity.conf"

Crear en ...test/java/projecto/ las carpetas runners y stepDefinitions

Crear en test/resources/features  el  requerimiento.features

Crear en la carpeta runner, la clase RequerimientoRunner, configurar y ejecutarla. copiar resultados de snippets.

Crear en la carpeta stepDefinitions, la clase RequerimientoStepDefinition, pegar resultados de snippets, del runner.

Crear en main/java/projecto la estructura de carpetas:

-->SP [abilities, questions, interactions, tasks, ui, utils, exceptions, reports, facts, matchers, models, endpoints, constants]
Orden del flujo = ui -> tasks -> interactions -> questions  | utils

-->POM [models, steps, pages, utils]
Orden del flujo = pages -> steps | utils


*******************************
SP

@Before
escenifica el elenco

@Given
abrir navegador

@When
secuencia de tareas y metodos

@Then
zona de aserciones
*******************************
