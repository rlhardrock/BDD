Configuracion Inicial de IDE

Crear folder "com.project" en test/java y en main/java

Crear carpetas test/java en "com.project"
stepDefinitions -> clases que mapean los steps de las features de Cucumber
runners
pageObjects -> clases que utilizan el api de Selenium

Crear carpetas en main/java en "com.project", segun estrategia POM o SP
pages,
steps,
models,
utils (codigo java puro aux)

Crear en test/resources crear un directorio  "features"

Revisar y configurar el 'build.gradle'

*****ver

Construir y configurar 'serenity.conf'  a nivel de la carpeta "features"

*****ver

Hacer Diseño de Automatización

crear en test/resources/features -> file  function.feature    -->  Gherkin

*****ver

por cada function crea un function.feature
por cada feature crea un functionStepDefinitions
ex:  Cart, Login, Search, Checkout, Landing, Takeoff, ...

*****ver

Construir el Runner, que la automatizacion convertir los pasos a metodos en snippet para usar en stepDefinitions

Crear en test/java/.../runners & stepsDefinitions la clase login.runner
y hacerla ejecutable adicionando (confirmar ruta del feature):

*****
crear y configurar Runner, ejecutar para obtener los steps
*****

hacer RUN ! ver BUILD SUCCESSFUL in Xs

copia @Dado y demas en su respectivo definitions
en la consola expone resultado,
crear la clase functionDefinition test/java/definitions/
copiar y pegar dentro de la public class functionDefinition y borrar los lanzadores

adicionar
import io.cucumber.java.es.*;

*****

Dirige a logica de Programación

en main/java/pages

crear class  loginPage
donde se modelan los localizadores  ---> extends PageObject  (singular)
import net.serenitybdd.core.pages.PageObject;
import org.openqa.selenium.By;

modelar localizadores

    By txtUsuario = By.id("LoginPanel0_Username");
con todos los localizadores

usar Lombok o generar Get


crear steps en su folder respectivo   loginSteps

dentro de la clase

@Page
loginPage FunctionPage = new loginPage();

    @Step("Comentario opcional -> Usuario abre el navegador")
    public void abrirNavegador(){
        FunctionPage.openUrl("https://demo.serenity.is/");
    }



instanciar en stepDefinitions

@Steps  (plural)  antes de los metodos gherkin

@Steps
loginSteps LoginSteps;

llamar al metodo  en el Dado/Cuando ...
